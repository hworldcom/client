name: Build client executables

on:
  push:
    tags:
      - "client-v*.*.*"   # tag like client-v1.0.3

permissions:
  contents: write

defaults:
  run:
    shell: bash

env:
  APP_NAME: scrapeclient        # ← change to your binary name
  ENTRY: client.py         # ← change if your entry file differs

jobs:
  build:
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-22.04, macos-14, windows-2022]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.12"
      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          pip install pyinstaller
      - name: Build single-file
        run: |
          pyinstaller --onefile --name "$APP_NAME" "$ENTRY"
      - name: Collect artifact (normalized name)
        run: |
          mkdir -p release
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            cp "dist/${APP_NAME}.exe" "release/${APP_NAME}-windows-x64.exe"
          elif [[ "$RUNNER_OS" == "macOS" ]]; then
            cp "dist/${APP_NAME}" "release/${APP_NAME}-macos-arm64"
          else
            cp "dist/${APP_NAME}" "release/${APP_NAME}-linux-x64"
          fi
      - uses: actions/upload-artifact@v4
        with:
          name: ${{ runner.os }}-artifact
          path: release/*

  release:
    needs: build
    runs-on: ubuntu-22.04
    env:
      TAG:   ${{ github.ref_name }}                 # e.g. client-v1.0.3
      OWNER: ${{ github.repository_owner }}
      REPO:  ${{ github.event.repository.name }}
      APP_NAME: ${{ env.APP_NAME }}
    steps:
      - uses: actions/download-artifact@v4
        with:
          path: ./collected
      - name: Flatten artifacts
        run: |
          mkdir -p release
          find collected -type f -exec cp {} release/ \;
          ls -al release
      - name: Build manifest (Python, no control chars)
        run: |
          python3 - <<'PY'
          import os, json, hashlib, pathlib
          tag   = os.environ["TAG"]              # like client-v1.0.3
          owner = os.environ["OWNER"]
          repo  = os.environ["REPO"]
          app   = os.environ["APP_NAME"]
          base  = f"https://github.com/{owner}/{repo}/releases/download/{tag}"
          files = {
            "windows": f"{app}-windows-x64.exe",
            "macos":   f"{app}-macos-arm64",
            "linux":   f"{app}-linux-x64",
          }
          def sha256(path: pathlib.Path) -> str:
            h = hashlib.sha256()
            with path.open("rb") as f:
              for chunk in iter(lambda: f.read(1<<20), b""):
                h.update(chunk)
            return h.hexdigest()
          manifest = {
            "version": tag.removeprefix("client-v"),
            "assets": {
              k: {"url": f"{base}/{fname}",
                  "sha256": sha256(pathlib.Path("release")/fname)}
              for k, fname in files.items()
            }
          }
          with open("release/client-manifest.json","w",encoding="utf-8") as f:
            json.dump(manifest, f, ensure_ascii=False)
          PY
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: release/*
          generate_release_notes: true
