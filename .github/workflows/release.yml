name: Build client executables

on:
  push:
    tags:
      - "client-v*.*.*"   # Tag like client-v1.0.0 to trigger

permissions:
  contents: write

# Use bash on Linux, macOS, and Windows runners
defaults:
  run:
    shell: bash

# ðŸ”§ Replace these with your names
env:
  APP_NAME: scrapeclient          # <- change to the binary name you want
  ENTRY: client.py           # <- change if your entry file isn't client.py

jobs:
  build:
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-22.04, macos-14, windows-2022]

    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          pip install pyinstaller

      - name: Build single-file executable
        run: |
          pyinstaller --onefile --name "$APP_NAME" "$ENTRY"

      - name: Collect artifacts & checksums
        run: |
          mkdir -p release
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            cp "dist/${APP_NAME}.exe" "release/${APP_NAME}-windows-x64.exe"
            certutil -hashfile "release/${APP_NAME}-windows-x64.exe" SHA256 | tail -n 1 > "release/${APP_NAME}-windows-x64.exe.sha256"
          elif [[ "$RUNNER_OS" == "macOS" ]]; then
            cp "dist/${APP_NAME}" "release/${APP_NAME}-macos-arm64"
            shasum -a 256 "release/${APP_NAME}-macos-arm64" | awk '{print $1}' > "release/${APP_NAME}-macos-arm64.sha256"
          else
            cp "dist/${APP_NAME}" "release/${APP_NAME}-linux-x64"
            sha256sum "release/${APP_NAME}-linux-x64" | awk '{print $1}' > "release/${APP_NAME}-linux-x64.sha256"
          fi

      - uses: actions/upload-artifact@v4
        with:
          name: ${{ runner.os }}-artifact
          path: release/*

  release:
    needs: build
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/download-artifact@v4
        with:
          path: ./collected

      - name: Flatten artifacts
        run: |
          mkdir -p release
          find collected -type f -exec cp {} release/ \;

      - name: Build manifest (clean checksums)
        env:
          TAG:   ${{ github.ref_name }}
          OWNER: ${{ github.repository_owner }}
          REPO:  ${{ github.event.repository.name }}
          APP_NAME: ${{ env.APP_NAME }}
        run: |
          set -euo pipefail
          VERSION="${TAG#client-v}"
          BASE="https://github.com/${OWNER}/${REPO}/releases/download/${TAG}"
          WIN="${APP_NAME}-windows-x64.exe"
          MAC="${APP_NAME}-macos-arm64"
          LIN="${APP_NAME}-linux-x64"

          # Helper extracts exactly 64 hex chars and removes CR/LF
          sha_clean() { grep -oE '[A-Fa-f0-9]{64}' | tr -d '\r\n'; }

          WIN_SHA="$(cat "release/${WIN}.sha256" | sha_clean || true)"
          MAC_SHA="$(cat "release/${MAC}.sha256" | sha_clean || true)"
          LIN_SHA="$(cat "release/${LIN}.sha256" | sha_clean || true)"

          python3 - <<'PY'
          import json, os
          version = os.environ["VERSION"]
          base = os.environ["BASE"]
          win = os.environ["WIN"];  win_sha = os.environ.get("WIN_SHA","")
          mac = os.environ["MAC"];  mac_sha = os.environ.get("MAC_SHA","")
          lin = os.environ["LIN"];  lin_sha = os.environ.get("LIN_SHA","")
          manifest = {
            "version": version,
            "assets": {
              "windows": {"url": f"{base}/{win}", "sha256": win_sha},
              "macos":   {"url": f"{base}/{mac}", "sha256": mac_sha},
              "linux":   {"url": f"{base}/{lin}", "sha256": lin_sha},
            },
          }
          with open("release/client-manifest.json","w", encoding="utf-8") as f:
              json.dump(manifest, f, ensure_ascii=False)
          PY
